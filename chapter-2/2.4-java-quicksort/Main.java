import java.util.Random;
import java.util.function.BiFunction;

public class Main {
    public static void main(final String[] args) {
        Integer[] intArrayObject = new Integer[] { 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, };

        Integer[] intArrayGeneric = new Integer[] { 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, };

        Integer[] intArray = new Integer[] { 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 5, 83, 75, 37, 27, 8, 38, 28,
                1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1,
                387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387,
                28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28,
                2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2,
                10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10,
                65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65,
                83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83,
                75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75,
                37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37,
                27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27,
                8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8,
                38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38, 28, 1, 387, 28, 2, 10, 65, 83, 75, 37, 27, 8, 38,
                28, 1, 387, 28, 2, };

        final ObjectQuickSorter objectQuickSorter = new ObjectQuickSorter();
        final GenericQuickSorter<Integer> sorter = new GenericQuickSorter<>();
        final IntegerQuickSorter integerQuickSorter = new IntegerQuickSorter();

        long objectSorterStart = System.currentTimeMillis();
        objectQuickSorter.sort(intArrayObject, 0, intArrayObject.length - 1, new IntegerCompare());
        long objectSorterEnd = System.currentTimeMillis();

        long genericSorterStart = System.currentTimeMillis();
        sorter.sort(intArrayGeneric, 0, intArrayGeneric.length - 1, (i1, i2) -> {
            if (i1 < i2)
                return -1;
            else if (i1 > i2)
                return 1;
            else
                return 0;
        });
        long genericSorterEnd = System.currentTimeMillis();

        long integerSorterStart = System.currentTimeMillis();
        integerQuickSorter.sort(intArray, 0, intArray.length - 1, new IntegerCompare());
        long integerSorterEnd = System.currentTimeMillis();

        for (int i = 0; i < intArrayObject.length; i++)
            if (intArrayObject[i].intValue() != intArrayGeneric[i].intValue())
                throw new RuntimeException("array values differ");

        System.out.println("ObjectQuickSorter took " + (objectSorterEnd - objectSorterStart) + " ms");
        System.out.println("GenericQuickSorter<Integer> took " + (genericSorterEnd - genericSorterStart) + " ms");
        System.out.println("IntegerQuickSorter took " + (integerSorterEnd - integerSorterStart) + " ms");

        System.out.println("SUCCESS.");
    }
}

/*
 * ObjectQuickSorter implement QuickSort on various types of data. It accepts
 * Object as data type. The consumer must pass an object that implements Cmp,
 * for the type of the data structure that is to be sorted. It is the
 * responisibility of the consumer to pass matching data types, otherwise a
 * TypeCastException will occurr.
 */
class ObjectQuickSorter extends Sorter {
    void sort(final Object[] v, final int left, final int right, final Cmp cmp) {
        if (left >= right)
            return;

        swap(v, left, random(left, right));
        int last = left;
        for (int i = left + 1; i <= right; i++)
            if (cmp.compare(v[i], v[left]) < 0)
                swap(v, ++last, i);
        swap(v, left, last);
        sort(v, left, last - 1, cmp);
        sort(v, last + 1, right, cmp);
    }

    static void swap(final Object[] v, final int i, final int j) {
        Object temp;

        temp = v[j];
        v[j] = v[i];
        v[i] = temp;
    }
}

class IntegerQuickSorter extends Sorter {
    void sort(final Integer[] v, final int left, final int right, final IntegerCompare cmp) {
        if (left >= right)
            return;

        swap(v, left, random(left, right));
        int last = left;
        for (int i = left + 1; i <= right; i++)
            if (cmp.compare(v[i], v[left]) < 0)
                swap(v, ++last, i);
        swap(v, left, last);
        sort(v, left, last - 1, cmp);
        sort(v, last + 1, right, cmp);
    }

    static void swap(final Integer[] v, final int i, final int j) {
        Integer temp;

        temp = v[j];
        v[j] = v[i];
        v[i] = temp;
    }
}

interface Cmp {
    int compare(Object x, Object y);
}

class IntegerCompare implements Cmp {
    public int compare(final Object x, final Object y) {
        final int i1 = ((Integer) x).intValue();
        final int i2 = ((Integer) y).intValue();

        if (i1 < i2)
            return -1;
        else if (i1 > i2)
            return 1;
        else
            return 0;
    }
}

class StringCompare implements Cmp {
    public int compare(final Object x, final Object y) {
        final String a = (String) x;
        final String b = (String) y;

        return a.compareTo(b);
    }
}

/*
 * GenericQuickSorter implement QuickSort on various types of data. It is a
 * generic class, which means that the consumer chooses the data types it will
 * work on. The consumer should pass a compare function that accepts two
 * parameters of the same data type that is to be sorted and returns an Integer.
 * Passing other data types will cause a compile time error. Thus using
 * GenericQuickSorter is safer that using ObjectQuickSorter as this one
 * leverages function references to provide real type-safety.
 */
class GenericQuickSorter<T> extends Sorter {
    public void sort(final T[] v, final int left, final int right, final BiFunction<T, T, Integer> compare) {
        if (left >= right)
            return;

        swap(v, left, random(left, right));
        int last = left;
        for (int i = left + 1; i <= right; i++)
            if (compare.apply(v[i], v[left]) < 0)
                swap(v, ++last, i);
        swap(v, left, last);
        sort(v, left, last - 1, compare);
        sort(v, last + 1, right, compare);
    }

    void swap(final T[] v, final int i, final int j) {
        T temp;

        temp = v[j];
        v[j] = v[i];
        v[i] = temp;
    }

}

class Sorter {
    static Random random = new Random();

    static int random(final int left, final int right) {
        return left + Math.abs(random.nextInt()) % (right - left + 1);
    }
}